#!/usr/bin/env php
<?php
/**
 * Packfire Framework Dependency Checker (pdc)
 * Written by Sam-Mauris Yong
 * 
 * Released Open Source under New BSD 3-Clause License
 * 
 * Visit us at http://mauris.sg/packfire
 */

echo "Packfire Framework Dependency Checker Tool
Written by Sam-Mauris Yong v1.0.1\n\n";

$stats = array(
    'files' => 0,
    'warning' => 0,
    'notFound' => 0
);

define('PDC_DIR', isset($argv[1]) ? $argv[1] : __DIR__);
$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(PDC_DIR), RecursiveIteratorIterator::CHILD_FIRST);

function checkClassFile($namespace){
    $path = PDC_DIR . DIRECTORY_SEPARATOR . str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . '.php';
    return file_exists($path);
}

function sigFig($value, $sigFigs = 3) {
	//convert to scientific notation e.g. 12345 -> 1.2345x10^4
	//where $significand is 1.2345 and $exponent is 4
	$exponent = floor(log10(abs($value))+1);
	$significand = round(($value
		/ pow(10, $exponent))
		* pow(10, $sigFigs))
		/ pow(10, $sigFigs);
	return $significand * pow(10, $exponent);
}


function get_php_classes($php_code) {
    $classes = array();
    $tokens = token_get_all($php_code);
    $count = count($tokens);
    $nextString = false;
    for ($i = 0; $i < $count; ++$i) {
        if(is_array($tokens[$i])){
            $current = $tokens[$i][0];
            if ($current == T_NEW || $current == T_EXTENDS) {
                $nextString = true;
            }elseif($current == T_PAAMAYIM_NEKUDOTAYIM
              && $tokens[$i - 1][0] == T_STRING){
                $class = $tokens[$i - 1][1];
                $classes[] = $class;
            }elseif($current == T_IMPLEMENTS){
                while(++$i < $count){
                    if(is_array($tokens[$i])){
                        if($tokens[$i][0] == T_STRING){
                            $class = $tokens[$i][1];
                            $classes[] = $class;
                        }
                    }elseif($tokens[$i] == '{'){
                        break;
                    }
                }
            }
            if($nextString && $current == T_STRING){
                $class = $tokens[$i][1];
                $classes[] = $class;
                $nextString = false;
            }
        }
    }
    return $classes;
}

$startTime = microtime(true);
foreach ($iterator as $path) {
    $extension = pathinfo($path->getFilename(), PATHINFO_EXTENSION);
    if ($path->isFile() && $extension == 'php') {
        ++$stats['files'];
        $buffer = '';
        //echo "Checking file $path\n";
        $contents = file_get_contents((string)$path);
        $index = array();
        
        $namespace = array();
        $nsCheck = preg_match('`namespace\\s(?<namespace>[a-zA-Z\\\\]+);`s', $contents, $namespace);
        if($nsCheck){
            $namespace = $namespace['namespace'];
        }else{
            ++$stats['warning'];
            $namespace = '';
            $buffer .= "Warning: no namespace found.\n";
        }
        
        $uses = array();
        preg_match_all('`use\\s(?<namespace>[a-zA-Z\\\\]+)(\\sas\\s(?<alias>[a-zA-Z]+)|);`s', $contents, $uses, PREG_SET_ORDER);
        foreach($uses as $use){
            if(isset($use['alias'])){
                $index[$use['alias']] = $use['namespace'];
            }else{
                if(false !== $pos = strrpos($use['namespace'], '\\')){
                    $alias = substr($use['namespace'], $pos + 1);
                }else{
                    $alias = $use['namespace'];
                }
                $index[$alias] = $use['namespace'];
            }
        }
        
        $result = get_php_classes($contents);
        $used = array();
        foreach($result as $entry){
            $name = $entry['name'];
            if(!preg_match('`(parent|self|static)`', $name)){
                $resolved = $name;
                if(isset($index[$name])){
                    $used[$name] = true;
                    $resolved = $index[$name];
                }elseif(substr($name, 0, 1) != '\\'){
                    $resolved = $namespace . '\\' . $name;
                }
                if(class_exists($resolved) || !checkClassFile($resolved)){
                    $buffer .= "Not found: $resolved\n";
                    ++$stats['notFound'];
                }
            }
        }
        $diff = array_diff(array_keys($index), array_keys($used));
        if(count($diff) > 0){
            foreach($diff as $unused){
                $buffer .= "Unused: $unused\n";
            }
        }
        if($buffer){
            echo "[$path]:\n" . $buffer;
        }
    }
}
$timeTaken = microtime(true) - $startTime;

echo 'Time: ' . sigFig($timeTaken, 5) . " seconds\n";

echo "\nCompleted. Summary:\n";
echo $stats['files'] . " files\n";
if($stats['warning']){
    echo $stats['warning'] . " warnings\n";
}
if($stats['notFound']){
    echo $stats['notFound'] . " dependency not found\n";
}